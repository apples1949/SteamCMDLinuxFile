name: SteamCMD Release

on:
  workflow_dispatch:
  schedule:
    - cron: '0 */4 * * *'

permissions:
  contents: write

jobs:
  package:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3
      with:
        fetch-depth: 0

    - name: Setup Environment
      run: |
        sudo apt-get update
        sudo apt-get install -y lib32gcc-s1
        sudo timedatectl set-timezone Asia/Shanghai

    - name: Prepare Directories
      run: |
        mkdir -p "$GITHUB_WORKSPACE/build"  
        WORKDIR="$HOME/steamcmd_build"
        mkdir -p "$WORKDIR"
        cd "$WORKDIR"
        echo "Current dir: $(pwd)"

    - name: Download SteamCMD
      run: |
        cd "$HOME/steamcmd_build"
        wget -q https://steamcdn-a.akamaihd.net/client/installer/steamcmd_linux.tar.gz
        tar -xzf steamcmd_linux.tar.gz
        rm steamcmd_linux.tar.gz
        ./steamcmd.sh +quit
        chmod -R a+r *

    - name: Create SteamCMD Package
      run: |
        tar -czvf "$GITHUB_WORKSPACE/build/steamcmd_linux.tar.gz" \
          --exclude='linux32/steamclient.so' \
          -C "$HOME/steamcmd_build" \
          linux32 \
          package \
          steamcmd.sh
    
        ls -lh "$GITHUB_WORKSPACE/build"
        echo "Package path: $GITHUB_WORKSPACE/build/steamcmd_linux.tar.gz"

    - name: Compress Package Contents
      run: |
        cd "$HOME/steamcmd_build"
        (cd package && tar -czvf ../package.tar.gz ./*)
        mv package.tar.gz "$GITHUB_WORKSPACE/build/"
        ls -lh "$GITHUB_WORKSPACE/build"
        echo "Package path: $GITHUB_WORKSPACE/build/package.tar.gz"
    
    - name: Verify files exist
      run: |
        echo "Checking if files exist..."
        ls -la "$GITHUB_WORKSPACE/build/"
        if [ -f "$GITHUB_WORKSPACE/build/steamcmd_linux.tar.gz" ]; then
          echo "✅ steamcmd_linux.tar.gz exists"
        else
          echo "❌ steamcmd_linux.tar.gz does not exist"
          exit 1
        fi
        if [ -f "$GITHUB_WORKSPACE/build/package.tar.gz" ]; then
          echo "✅ package.tar.gz exists"
        else
          echo "❌ package.tar.gz does not exist"
          exit 1
        fi
    
    - name: Generate Release Info
      id: release_info
      run: |
        # 设置时区为北京时间
        export TZ='Asia/Shanghai'
        RELEASE_NAME="SteamCMD Build $(date +'%Y-%m-%d %H:%M')"
        BUILD_TIME="$(date +'%Y-%m-%d %H:%M:%S')"
        echo "RELEASE_NAME=$RELEASE_NAME" >> $GITHUB_OUTPUT
        echo "BUILD_TIME=$BUILD_TIME" >> $GITHUB_OUTPUT
        echo "Generated release name: $RELEASE_NAME"
        echo "Generated build time: $BUILD_TIME"

    - name: Check and delete existing release
      id: check_release
      uses: actions/github-script@v6
      with:
        script: |
          try {
            // 首先尝试获取发布
            const release = await github.rest.repos.getReleaseByTag({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag: 'steamcmd-latest'
            });
            
            // 如果发布存在，删除它
            await github.rest.repos.deleteRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              release_id: release.data.id
            });
            
            console.log('已删除现有发布');
            
            // 然后尝试删除标签
            try {
              await github.rest.git.deleteRef({
                owner: context.repo.owner,
                repo: context.repo.repo,
                ref: 'tags/steamcmd-latest'
              });
              console.log('已删除现有标签');
            } catch (tagError) {
              console.log('删除标签时出错，可能标签不存在:', tagError.message);
            }
            
            return { exists: true };
          } catch (error) {
            if (error.status === 404) {
              console.log('发布不存在，将继续创建新发布');
              return { exists: false };
            }
            console.log('检查发布时出错:', error.message);
            throw error;
          }
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: steamcmd-latest
        release_name: ${{ steps.release_info.outputs.RELEASE_NAME }}
        draft: false
        prerelease: false
        body: |
          自动生成的 SteamCMD 构建
          - 构建时间: ${{ steps.release_info.outputs.BUILD_TIME }}
          - 包含 SteamCMD Linux 二进制文件和包内容
          - 此发布每 4 小时自动更新一次

    - name: Upload SteamCMD Package
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ${{ github.workspace }}/build/steamcmd_linux.tar.gz
        asset_name: steamcmd_linux.tar.gz
        asset_content_type: application/gzip

    - name: Upload Package Contents
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ${{ github.workspace }}/build/package.tar.gz
        asset_name: package.tar.gz
        asset_content_type: application/gzip
